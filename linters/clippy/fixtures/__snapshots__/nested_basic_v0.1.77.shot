// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`linter=clippy fixture=nested_basic version=0.1.77 1`] = `
{
  "issues": [
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 23,
          "endLine": 13,
          "startColumn": 8,
          "startLine": 13,
        },
      },
      "message": "this binary expression can be simplified",
      "ruleKey": "double_comparisons",
      "snippet": "    if x == y || x < y {}",
      "snippetWithContext": "// be compiled to actually trigger it.
pub enum Gibberish {
    Foo(String),
    #[doc(hidden)]
    __Nonexhaustive,
}

fn main() {
    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");

    // needless range loop
    let vec = vec!['a', 'b', 'c'];
    for i in 0..vec.len() {
        println!("{}", vec[i]);
",
      "tool": "clippy",
    },
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 2,
          "endLine": 8,
          "startColumn": 1,
          "startLine": 4,
        },
      },
      "message": "this seems like a manual implementation of the non-exhaustive pattern",
      "ruleKey": "manual_non_exhaustive",
      "snippet": "pub enum Gibberish {
    Foo(String),
    #[doc(hidden)]
    __Nonexhaustive,
}",
      "snippetWithContext": "// clippy/manual_non_exhaustive has {"suggested_replacement": null} in its JSON, so we want to
// explicitly test that. Note that a match {} block against this enum in the callgraph needs to
// be compiled to actually trigger it.
pub enum Gibberish {
    Foo(String),
    #[doc(hidden)]
    __Nonexhaustive,
}

fn main() {
    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");
",
      "tool": "clippy",
    },
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_if",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 26,
          "endLine": 13,
          "startColumn": 5,
          "startLine": 13,
        },
      },
      "message": "this \`if\` branch is empty",
      "ruleKey": "needless_if",
      "snippet": "    if x == y || x < y {}",
      "snippetWithContext": "// be compiled to actually trigger it.
pub enum Gibberish {
    Foo(String),
    #[doc(hidden)]
    __Nonexhaustive,
}

fn main() {
    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");

    // needless range loop
    let vec = vec!['a', 'b', 'c'];
    for i in 0..vec.len() {
        println!("{}", vec[i]);
",
      "tool": "clippy",
    },
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 26,
          "endLine": 21,
          "startColumn": 14,
          "startLine": 21,
        },
      },
      "message": "the loop variable \`i\` is only used to index \`vec\`",
      "ruleKey": "needless_range_loop",
      "snippet": "    for i in 0..vec.len() {",
      "snippetWithContext": "    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");

    // needless range loop
    let vec = vec!['a', 'b', 'c'];
    for i in 0..vec.len() {
        println!("{}", vec[i]);

    }
    // manual nonexhaustive
    let z = Gibberish::Foo("fizz".to_string());
    println!("gibberish is {}", match z {
        Gibberish::Foo(_) => "buzz",
        Gibberish::__Nonexhaustive => unreachable!(),
    });
}",
      "tool": "clippy",
    },
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#print_literal",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 42,
          "endLine": 17,
          "startColumn": 20,
          "startLine": 17,
        },
      },
      "message": "literal with an empty format string",
      "ruleKey": "print_literal",
      "snippet": "    println!("{}", "empty format literal");",
      "snippetWithContext": "    __Nonexhaustive,
}

fn main() {
    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");

    // needless range loop
    let vec = vec!['a', 'b', 'c'];
    for i in 0..vec.len() {
        println!("{}", vec[i]);

    }
    // manual nonexhaustive
    let z = Gibberish::Foo("fizz".to_string());
    println!("gibberish is {}", match z {",
      "tool": "clippy",
    },
    {
      "category": "CATEGORY_BUG",
      "documentationUrl": "https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec",
      "level": "LEVEL_MEDIUM",
      "location": {
        "path": "random_parent_dir/src/main.rs",
        "range": {
          "endColumn": 34,
          "endLine": 20,
          "startColumn": 15,
          "startLine": 20,
        },
      },
      "message": "useless use of \`vec!\`",
      "ruleKey": "useless_vec",
      "snippet": "    let vec = vec!['a', 'b', 'c'];",
      "snippetWithContext": "fn main() {
    let x = 1;
    let y = 2;
    if x == y || x < y {}
    println!("Hello World");

    // empty format literal
    println!("{}", "empty format literal");

    // needless range loop
    let vec = vec!['a', 'b', 'c'];
    for i in 0..vec.len() {
        println!("{}", vec[i]);

    }
    // manual nonexhaustive
    let z = Gibberish::Foo("fizz".to_string());
    println!("gibberish is {}", match z {
        Gibberish::Foo(_) => "buzz",
        Gibberish::__Nonexhaustive => unreachable!(),
    });",
      "tool": "clippy",
    },
  ],
}
`;
